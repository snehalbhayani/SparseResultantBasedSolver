extract_mon_basis:= proc(eqs1, vars, sizeofcombs, polycomb, heurisiticbasislength) 
local prm, tempT, zcols, Cr, Ctemp, rows2rem, rows2kp, rowindices, colindices, cstried, c, Btemp, Ttemp, B1, T1, T2, B2, temp, bbs, gbs, cols2kp, cols2rem, simplex, selectedB, selectedT, counter, newpredeigsz, oldpredeigsz, modifiedCred, found, ti, crowstobedelet, rowColCnts, tempCred, Cred, tn, C, solverrank, testcoeffmat, Tn, ii, baks, k, T, Bset, minmonnorm, isbnpresent, Bn, B, interiorintpoints, hp1s, hlfsps, translatedconvhull, delta, deltatoskip, deltasiterator, combind, i, allBs, minkowskis, ind, PForMink, comb, vci, variouscombinations, A, v, P, EE, ll, indicestotest, indicestoskip:
prm := ithprime(1000):
eqs := [-4396*a1*a2^2*a3^3-9697*a1*a2*a3^4-3700*a1*a2^2*a3+7536*a1*a2*a3^2+4396*a1*a3^3-4566*a2*a3^3+10000*a1*a2+3700*a1*a3+296*a2*a3+3219*a3^2-800, -9697*a1^2*a2^4*a3^4+7536*a1^2*a2^4*a3^2+17584*a1^2*a2^3*a3^3+10000*a1^2*a2^4+14800*a1^2*a2^3*a3+17584*a1^2*a2*a3^3+9697*a1^2*a3^4+6438*a1*a2^3*a3^2+9132*a1*a2^2*a3^3-9697*a2^2*a3^4+14800*a1^2*a2*a3-7536*a1^2*a3^2-1600*a1*a2^3-592*a1*a2^2*a3+6438*a1*a2*a3^2+9132*a1*a3^3+972*a2^2*a3^2+8792*a2*a3^3-10000*a1^2-1600*a1*a2-592*a1*a3+64*a2^2+7400*a2*a3-6564*a3^2-9936, -14252940*a1^3*a2^6*a3^3+31189158*a1^3*a2^6*a3-42758820*a1^3*a2^4*a3^3+9433944*a1^2*a2^5*a3^3+93567474*a1^3*a2^4*a3-42758820*a1^3*a2^2*a3^3-71831700*a1^2*a2^5*a3+32997996*a1^2*a2^4*a3^2+18867888*a1^2*a2^3*a3^3-14252940*a1*a2^4*a3^3+93567474*a1^3*a2^2*a3-14252940*a1^3*a3^3-10317888*a1^2*a2^4-143663400*a1^2*a2^3*a3+65995992*a1^2*a2^2*a3^2+9433944*a1^2*a2*a3^3+52829640*a1*a2^4*a3-1083042*a1*a2^3*a3^2-14252940*a1*a2^2*a3^3+9433944*a2^3*a3^3+31189158*a1^3*a3-20635776*a1^2*a2^2-71831700*a1^2*a2*a3+32997996*a1^2*a3^2+14378400*a1*a2^3+87100038*a1*a2^2*a3-1083042*a1*a2*a3^2-12236400*a2^3*a3-24446700*a2^2*a3^2-10317888*a1^2+14378400*a1*a2+34270398*a1*a3-4507200*a2^2-50910732*a2*a3-14825088]:
EE := eval(expand(eqs)):
for i to ArrayTools[Size](EE)[2] do 
	P[i] := newtonpolytope(EE[i], vars):
	v[i] := vertices(P[i]):
	A[i] := lattpts(EE[i], vars):     
end do: 
simplex := map(proc (j) options operator, arrow; map(proc (i) options operator, arrow; `if`(i = j, rand(1..4)(), 0) end proc, [seq(1 .. numelems(vars))]) end proc, [seq(1 .. numelems(vars)+1)]):
P[i] := convhull(op(simplex)):
v[i] := vertices(P[i]):
A[i] := vertices(P[i]):
v := convert(v, list):

if numelems(polycomb) = 0 then 
    variouscombinations := (map(proc (l) options operator, arrow; seq(combinat[choose]([seq(1 .. numelems(P))], l)) end proc, sizeofcombs)):
else
    variouscombinations:= [polycomb]: 
end if:

unassign('minkowskis'); 
for vci to numelems(variouscombinations) do 
	comb := variouscombinations[vci]:
	PForMink := []; 
	for ind in comb do 
		PForMink := [op(PForMink), P[ind]]: 
	end do:
	minkowskis[vci] := minkowskisum(op(PForMink)): 
end do:

selectedB := -1:
selectedT := -1:
allBs := []:
oldpredeigsz := infinity:
for combind in combinat[randperm]([seq(1..numelems(variouscombinations))]) do
	randomize():
	printf("Considering the polytopes : %s \n", convert(variouscombinations[combind],string));
    deltasiterator := combinat[cartprod](map(proc (i1) options operator, arrow; map(proc (j) options operator, arrow; j end proc, [ -0.01, 0.01, 0]) end proc, [seq(1 .. numelems(vars))])):	
    
    while not deltasiterator[finished] do
       delta := deltasiterator[nextvalue]():
        
		translatedconvhull := minkowskisum(minkowskis[combind], convhull(convert(delta, rational))):
		if dim(translatedconvhull) < numelems(vars) then 
    			next: 
		end if:     
		hp1s := map(rel -> convert(`~`[`*`](lhs(rel), ` $`, vars), `+`) <= rhs(rel), convert(hspaces(translatedconvhull), list)): 

		try
			B := convert(IntegerPoints1(hp1s, vars), list);
            #B := [[0, 3, 2], [0, 3, 3], [0, 4, 0], [0, 4, 3], [0, 4, 5], [0, 5, 1], [0, 6, 3], [0, 6, 5], [1, 2, 0], [1, 2, 3], [1, 3, 1], [1, 4, 0], [1, 4, 6], [1, 5, 3], [1, 5, 8], [1, 6, 6], [1, 7, 6], [1, 7, 10], [2, 2, 1], [2, 2, 5], [2, 3, 0], [2, 3, 1], [2, 3, 2], [2, 3, 7], [2, 4, 2], [2, 5, 0], [2, 5, 6], [2, 6, 1], [2, 6, 2], [2, 7, 5], [2, 7, 7], [2, 7, 8], [2, 7, 10], [2, 8, 2], [2, 8, 4], [2, 8, 7], [2, 8, 8], [2, 8, 9], [2, 8, 10], [3, 2, 0], [3, 2, 1], [3, 2, 3], [3, 4, 0], [3, 4, 7], [3, 4, 9], [3, 5, 1], [3, 5, 3], [3, 5, 5], [3, 5, 7], [3, 5, 8], [3, 5, 9], [3, 6, 0], [3, 6, 3], [3, 6, 7], [3, 7, 0], [3, 7, 2], [3, 7, 4], [3, 7, 6], [3, 7, 7], [3, 7, 9], [3, 8, 6], [3, 9, 2], [3, 9, 9], [3, 9, 10], [4, 2, 0], [4, 2, 1], [4, 2, 7], [4, 4, 3], [4, 4, 4], [4, 4, 5], [4, 5, 3], [4, 5, 8], [4, 6, 3], [4, 6, 8], [4, 8, 0], [4, 8, 2], [4, 8, 7], [4, 9, 1], [4, 9, 2], [4, 9, 7], [4, 10, 6], [4, 10, 7], [5, 2, 2], [5, 2, 6], [5, 2, 7], [5, 2, 9], [5, 3, 0], [5, 3, 5], [5, 4, 1], [5, 4, 3], [5, 4, 5], [5, 5, 0], [5, 5, 4], [5, 5, 7], [5, 5, 8], [5, 5, 10], [5, 6, 5], [5, 7, 3], [5, 7, 5], [5, 8, 0], [5, 8, 1], [5, 8, 3], [5, 8, 7], [5, 8, 10], [5, 9, 4], [5, 10, 2], [5, 10, 3], [5, 10, 4], [5, 10, 10], [5, 11, 7], [5, 11, 8], [5, 11, 9], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 3, 0], [0, 3, 1], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 4, 1], [0, 4, 2], [0, 4, 4], [0, 4, 6], [0, 4, 7], [0, 5, 2], [0, 5, 3], [0, 5, 4], [0, 5, 5], [0, 5, 6], [0, 5, 7], [0, 5, 8], [0, 6, 2], [0, 6, 4], [0, 6, 6], [0, 6, 7], [0, 6, 8], [0, 6, 9], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 1, 5], [1, 2, 1], [1, 2, 2], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 3, 0], [1, 3, 2], [1, 3, 3], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 1], [1, 4, 2], [1, 4, 3], [1, 4, 4], [1, 4, 5], [1, 4, 7], [1, 4, 8], [1, 5, 0], [1, 5, 1], [1, 5, 2], [1, 5, 4], [1, 5, 5], [1, 5, 6], [1, 5, 7], [1, 5, 9], [1, 6, 1], [1, 6, 2], [1, 6, 3], [1, 6, 4], [1, 6, 5], [1, 6, 7], [1, 6, 8], [1, 6, 9], [1, 6, 10], [1, 7, 2], [1, 7, 3], [1, 7, 4], [1, 7, 5], [1, 7, 7], [1, 7, 8], [1, 7, 9], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [2, 1, 5], [2, 1, 6], [2, 2, 0], [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 2, 6], [2, 2, 7], [2, 3, 3], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 8], [2, 4, 0], [2, 4, 1], [2, 4, 3], [2, 4, 4], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 4, 9], [2, 5, 1], [2, 5, 2], [2, 5, 3], [2, 5, 4], [2, 5, 5], [2, 5, 7], [2, 5, 8], [2, 5, 9], [2, 5, 10], [2, 6, 0], [2, 6, 3], [2, 6, 4], [2, 6, 5], [2, 6, 6], [2, 6, 7], [2, 6, 8], [2, 6, 9], [2, 6, 10], [2, 7, 1], [2, 7, 2], [2, 7, 3], [2, 7, 4], [2, 7, 6], [2, 7, 9], [2, 8, 3], [2, 8, 5], [2, 8, 6], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 1, 4], [3, 1, 5], [3, 1, 6], [3, 1, 7], [3, 2, 2], [3, 2, 4], [3, 2, 5], [3, 2, 6], [3, 2, 7], [3, 2, 8], [3, 3, 0], [3, 3, 1], [3, 3, 2], [3, 3, 3], [3, 3, 4], [3, 3, 5], [3, 3, 6], [3, 3, 7], [3, 3, 8], [3, 3, 9], [3, 4, 1], [3, 4, 2], [3, 4, 3], [3, 4, 4], [3, 4, 5], [3, 4, 6], [3, 4, 8], [3, 4, 10], [3, 5, 0], [3, 5, 2], [3, 5, 4], [3, 5, 6], [3, 5, 10], [3, 6, 1], [3, 6, 2], [3, 6, 4], [3, 6, 5], [3, 6, 6], [3, 6, 8], [3, 6, 9], [3, 6, 10], [3, 7, 1], [3, 7, 3], [3, 7, 5], [3, 7, 8], [3, 7, 10], [3, 8, 1], [3, 8, 2], [3, 8, 3], [3, 8, 4], [3, 8, 5], [3, 8, 7], [3, 8, 8], [3, 8, 9], [3, 8, 10], [3, 9, 3], [3, 9, 4], [3, 9, 5], [3, 9, 6], [3, 9, 7], [3, 9, 8], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 1, 3], [4, 1, 4], [4, 1, 5], [4, 1, 6], [4, 1, 7], [4, 1, 8], [4, 2, 2], [4, 2, 3], [4, 2, 4], [4, 2, 5], [4, 2, 6], [4, 2, 8], [4, 2, 9], [4, 3, 0], [4, 3, 1], [4, 3, 2], [4, 3, 3], [4, 3, 4], [4, 3, 5], [4, 3, 6], [4, 3, 7], [4, 3, 8], [4, 3, 9], [4, 3, 10], [4, 4, 0], [4, 4, 1], [4, 4, 2], [4, 4, 6], [4, 4, 7], [4, 4, 8], [4, 4, 9], [4, 4, 10], [4, 5, 0], [4, 5, 1], [4, 5, 2], [4, 5, 4], [4, 5, 5], [4, 5, 6], [4, 5, 7], [4, 5, 9], [4, 5, 10], [4, 6, 0], [4, 6, 1], [4, 6, 2], [4, 6, 4], [4, 6, 5], [4, 6, 6], [4, 6, 7], [4, 6, 9], [4, 6, 10], [4, 7, 0], [4, 7, 1], [4, 7, 2], [4, 7, 3], [4, 7, 4], [4, 7, 5], [4, 7, 6], [4, 7, 7], [4, 7, 8], [4, 7, 9], [4, 7, 10], [4, 8, 1], [4, 8, 3], [4, 8, 4], [4, 8, 5], [4, 8, 6], [4, 8, 8], [4, 8, 9], [4, 8, 10], [4, 9, 3], [4, 9, 4], [4, 9, 5], [4, 9, 6], [4, 9, 8], [4, 9, 9], [4, 9, 10], [4, 10, 2], [4, 10, 3], [4, 10, 4], [4, 10, 5], [4, 10, 8], [4, 10, 9], [4, 10, 10], [5, 1, 1], [5, 1, 2], [5, 1, 3], [5, 1, 4], [5, 1, 5], [5, 1, 6], [5, 1, 7], [5, 1, 8], [5, 1, 9], [5, 2, 0], [5, 2, 1], [5, 2, 3], [5, 2, 4], [5, 2, 5], [5, 2, 8], [5, 2, 10], [5, 3, 1], [5, 3, 2], [5, 3, 3], [5, 3, 4], [5, 3, 6], [5, 3, 7], [5, 3, 8], [5, 3, 9], [5, 3, 10], [5, 4, 0], [5, 4, 2], [5, 4, 4], [5, 4, 6], [5, 4, 7], [5, 4, 8], [5, 4, 9], [5, 4, 10], [5, 5, 1], [5, 5, 2], [5, 5, 3], [5, 5, 5], [5, 5, 6], [5, 5, 9], [5, 6, 0], [5, 6, 1], [5, 6, 2], [5, 6, 3], [5, 6, 4], [5, 6, 6], [5, 6, 7], [5, 6, 8], [5, 6, 9], [5, 6, 10], [5, 7, 0], [5, 7, 1], [5, 7, 2], [5, 7, 4], [5, 7, 6], [5, 7, 7], [5, 7, 8], [5, 7, 9], [5, 7, 10], [5, 8, 2], [5, 8, 4], [5, 8, 5], [5, 8, 6], [5, 8, 8], [5, 8, 9], [5, 9, 0], [5, 9, 1], [5, 9, 2], [5, 9, 3], [5, 9, 5], [5, 9, 6], [5, 9, 7], [5, 9, 8], [5, 9, 9], [5, 9, 10], [5, 10, 1], [5, 10, 5], [5, 10, 6], [5, 10, 7], [5, 10, 8], [5, 10, 9], [5, 11, 2], [5, 11, 3], [5, 11, 4], [5, 11, 5], [5, 11, 6], [5, 11, 10]]:
		catch:
			printf("Failed for delta %s \n", convert(delta,string));
			next:
		end try:
		Bn := numelems(B):
        if  Bn = 0 then next: end if:
		
        minmonnorm := norm(convert(ListTools[FindMinimalElement](B, proc (b1, b2) options operator, arrow; norm(convert(b1-b2,Vector)) = 0 end proc),Vector)):
		# if minmonnorm <> 0 then next: end if:

		Bset := convert(B, set); 
		for k to numelems(EE) do 
			T[k] := []:
			baks := map(proc (belement) options operator, arrow; op(select(proc (diffba) options operator, arrow; foldl(`and`, true, op(`~`[`>=`](diffba, ` $`, map(proc (ii) options operator, arrow; 0 end proc, [seq(1 .. numelems(vars))])))) end proc, map(proc (aelement) options operator, arrow; `~`[`-`](belement, aelement) end proc, A[k]))) end proc, B):

			for ii to numelems(A[k])-1 do 
				baks := ListTools[FindRepetitions](baks):
			end do: 
			T[k] := convert(convert(convert(baks, set), list), Matrix): 
		end do:
		T := convert(T,list):
		Tn := convert(map(t->ArrayTools[Size](t,1), T), `+`):
        
		if Tn >= Bn and min(map(t->ArrayTools[Size](t,1), T)) > 0 then 
		        temp := convert(T[-1], list, nested = true): 
        		bbs := map(proc (i1) options operator, arrow; select(proc (j1) options operator, arrow; B[j1] = [temp[i1][1], op(temp[i1][2..])] end proc, [seq(1 .. Bn)])[1] end proc, [seq(1 .. numelems(temp))]): 
		        gbs := convert(convert([seq(1 .. numelems(B))], set) minus convert(bbs, set), list):   
                testcoeffmat := polytomat(T, B, EE, vars, Bn, Tn):			
        	    testcoeffmat := LinearAlgebra[Modular][Mod](prm, testcoeffmat, integer[8]):
                solverrank := LinearAlgebra[Modular][Rank](prm, testcoeffmat):
        
	            if Bn = solverrank then
                    newpredeigsz := Bn - LinearAlgebra[Modular][Rank](prm, testcoeffmat[1..(Tn - numelems(temp)), ..]):

    		        if newpredeigsz <= oldpredeigsz and convert(map(b->numelems(b)>Bn, allBs), `and`) then
                        oldpredeigsz := newpredeigsz:
                        printf("Predicted eigenvalue problem: %d \n", newpredeigsz):                            
                        if  LinearAlgebra[Modular][Rank](prm, testcoeffmat[1..Tn - numelems(temp), gbs]) = numelems(gbs) then
                            selectedB := B:
                            selectedT := T:
                            allBs := [op(allBs), B]:
                            printf(" .................... \n"):
                            printf("Coefficient matrix: %d X %d \n", Tn, Bn); 
                            printf("Predicted eigenvalue problem: %d \n", newpredeigsz):                            
            	        	printf("delta =  %{t}2f \n", LinearAlgebra[Transpose](convert(delta,Matrix))):
                            printf(" .................... \n"):
                            
                        end if:
                    end if:
                end if:
    		end if:
        end do:
    end do:

if selectedT = -1 then 
	printf("NO SOLVER FOUND .... \n"):
	return convert([],list), convert([],list), [[]]:
end if:

T := selectedT:
Tn := convert(map(proc (t) options operator, arrow; ArrayTools[Size](t,1) end proc, T), `+`):
B := selectedB:
Bn := numelems(B):
C := polytomat(convert(T, list), B, eval(eqs), vars, Bn, Tn); 
testcoeffmat := LinearAlgebra[Modular][Mod](prm, C, integer[8]):
solverrank := LinearAlgebra[Modular][Rank](prm, testcoeffmat):
printf("Monomial basis extracted. \n"):
temp := convert(T[-1], list, nested = true):
oldpredeigsz := Bn - LinearAlgebra[Modular][Rank](prm, testcoeffmat[1..(Tn - numelems(temp)), ..]):

# Removal of rows and columns =================================================================================================================
B1 := B: T1 := convert(T,list):
T2 := T1: B2 := B1:
found := numelems(B):
    while numelems(B2) > heurisiticbasislength do
    B1 := B: T1 := convert(T,list):
    Tn := convert(map(proc (t) options operator, arrow; ArrayTools[Size](t,1) end proc, T1), `+`):    
    cstried :=[]:
    printf("Attempting row-column removal... \n"):    
    ind := 1;    
    
    while numelems(B1) > heurisiticbasislength do
    	randomize():
        Tn := convert(map(proc (t) options operator, arrow; ArrayTools[Size](t,1) end proc, T1), `+`):
    	Ctemp := polytomat(T1, B1, eval(eqs), vars, numelems(B1), convert(map(proc (t) options operator, arrow; ArrayTools[Size](t,1) end proc, T1), `+`)):
        Ctemp := LinearAlgebra[Modular][Mod](prm, Ctemp, integer[8]):
    	Btemp := B1:
    	Ttemp := T1:
        
        temp := convert(Ttemp[-1], list, nested = true):
    	bbs := map(i1 -> select(k -> Btemp[k] = [temp[i1][1], op(temp[i1][2..])], [seq(1 .. numelems(Btemp))])[1], [seq(1 .. numelems(temp))]):
    	gbs := convert(convert([seq(1 .. numelems(Btemp))], set) minus convert(bbs, set), list):    
        
        if numelems(cstried) = numelems(B) then break: end if:
        rowindices := [seq(1..Tn)]:
        colindices := [seq(1..numelems(Btemp))]:
					
        c := [op(combinat[randperm]([op(gbs), op(bbs)])[1..1])]:
        cstried	:= [op(cstried), op(c)]:
        

    	# Cols to remove
        rows2rem := convert(convert(map(j -> op(select(i -> Ctemp[i,j] <> 0, [seq(1..ArrayTools[Size](Ctemp)[1])])), c),set),list):	
        rows2kp := select(proc (j) options operator, arrow; not(j in rows2rem) end proc, [seq(1 .. ArrayTools[Size](Ctemp,1))]): 		
                
        # Modified C
        Ctemp := Ctemp[rows2kp, () .. ()]:                
        if ArrayTools[Size](Ctemp,1) < ArrayTools[Size](Ctemp,2) or ArrayTools[Size](Ctemp,1) = 0 then next: end if:
        
        zcols := convert(ArrayTools[AddAlongDimension](map(i -> `if`(i = 0, 0, 1), Ctemp), 1), list):
        cols2kp := select(j -> zcols[j] <> 0, [seq(1 .. numelems(zcols))]):
        cols2rem := select(j -> zcols[j] = 0, [seq(1 .. numelems(zcols))]):     
        Ctemp := Ctemp[() .. (), cols2kp]: 
        Btemp := Btemp[cols2kp]:                
        if numelems(cols2rem) = 0  then next: end if:        

        rowindices := rowindices[rows2kp]:
        Ttemp:=map(k -> Ttemp[k][select(j -> j+convert(map(t->ArrayTools[Size](Ttemp[t],1), [seq(1 .. numelems(Ttemp[..k-1]))]), `+`) in rowindices, [seq(1..ArrayTools[Size](Ttemp[k],1))]),..], [seq(1..numelems(Ttemp))]):	
    	if convert(map(t->ArrayTools[Size](t,1), Ttemp), `*`) = 0  then next: end if:               

        temp := convert(Ttemp[-1], list, nested = true):
        bbs := map(i1 -> select(k -> Btemp[k] = [temp[i1][1], op(temp[i1][2..])], [seq(1 .. numelems(Btemp))])[1], [seq(1 .. numelems(temp))]):
        gbs := convert(convert([seq(1 .. numelems(Btemp))], set) minus convert(bbs, set), list):

        if (numelems(gbs)-LinearAlgebra[Modular][Rank](prm, Ctemp[[seq(1..convert(map(t -> ArrayTools[Size](t,1), Ttemp[..-2]), `+`))], gbs]) <> 0)  then next: end if:

        newpredeigsz := numelems(Btemp) - LinearAlgebra[Modular][Rank](prm, Ctemp[1..convert(map(proc (t) options operator, arrow; ArrayTools[Size](t)[1] end proc, Ttemp[..-2]), `+`), ..]):        
        if newpredeigsz > oldpredeigsz then next: end if:
        B1 := Btemp:
        T1 := Ttemp:    
        cstried := []:            
        
    end do:

    if found > numelems(B1) then 
        T2 := T1:
        B2 := B1:
        found := numelems(B1):        
    end if:
end do:

T:=T2: B:=B2:
Tn := convert(map(proc (t) options operator, arrow; ArrayTools[Size](t)[1] end proc, T), `+`):
C := polytomat(convert(T, list), B, eval(eqs), vars, numelems(B), Tn): 
printf("Reduced coefficient matrix: %d X %d \n", Tn, numelems(B)):
# =============================================================================================================
# =============================================================================================================
# For tracking an indice, we add '1' to the end of each element in the list of monomial multiples
tn := 0:

for k to  ArrayTools[Size](T)[2] do
	T[k] := convert((map(proc (t) options operator, arrow; [op(convert(T[k][t], list)), t+tn] end proc, [seq(1 .. ArrayTools[Size](T[k])[1])])), Matrix):
	tn := tn + ArrayTools[Size](T[k])[1]:
end do:
# =============================================================================================================

printf("Removing the excess rows to get a reduced matrix with smaller basis.\n"):
# =============================================================================================================
# =============================================================================================================

for counter from 1 to 500 do
    randomize():
    Cred := LinearAlgebra[Copy](LinearAlgebra[Modular][Mod](prm, C, integer[8])):
    T1 := T:
    tempCred := Cred:
    rowColCnts := ArrayTools[Size](Cred):
    crowstobedelet := []:

    ll := max(map(proc (ti) options operator, arrow; ArrayTools[Size](ti)[1] end proc, T1)):
    indicestotest := [seq(1..Tn)]: 
    temp := ListTools[Reverse](ListTools[Reverse]([seq(1..convert(map(proc (t) options operator, arrow; ArrayTools[Size](t)[1] end proc, T1), `+`))])[1..ArrayTools[Size](T1[-1],1)]):
        
    indicestoskip := []:
    #indicestoskip := [op(indicestoskip),op(select(i -> convert(convert(T1[-1][i  - (tn-ArrayTools[Size](T1[-1],1)) ,..-2], list), `+`) <= 1, temp))]:

    temp := convert(convert(temp, set) minus convert(indicestoskip,set), list):
    indicestotest := convert(convert(indicestotest,set) minus convert(temp,set), list):
    indicestotest := [op(combinat[randperm](temp)), op(indicestotest[1..0]), op(combinat[randperm](indicestotest[1..]))]:
    
    for i in indicestotest do 
	for ti to ArrayTools[Size](T1)[2] do 
		temp := T1[ti]; 
		found := select(proc (ti1) options operator, arrow; T1[ti][ti1][-1] = i end proc, [seq(1 .. ArrayTools[Size](T1[ti])[1])]); 
		if numelems(found) > 0 then 
            temp := LinearAlgebra[DeleteRow](T1[ti], found); 
            break: 
		end if: 
	end do; 
	modifiedCred := LinearAlgebra[DeleteRow](tempCred, [op(crowstobedelet), i]):
	testcoeffmat := LinearAlgebra[Modular][Mod](prm, modifiedCred, integer[8]):
	solverrank := LinearAlgebra[Modular][Rank](prm, testcoeffmat):
    
	if ArrayTools[Size](temp)[1] > 0 then 
		if solverrank = rowColCnts[2] then
			
			tempT := T1:
			tempT[ti] := LinearAlgebra[DeleteRow](tempT[ti], found):
			temp := convert(tempT[-1], list, nested = true): 
			bbs := map(proc (i1) options operator, arrow; select(proc (j1) options operator, arrow; B[j1] = [temp[i1][1], op(temp[i1][2..-2])] end proc, [seq(1 .. numelems(B))])[1] end proc, [seq(1 .. numelems(temp))]): 
			gbs := convert(convert([seq(1 .. numelems(B))], set) minus convert(bbs, set), list):
            			
			if numelems(gbs) = LinearAlgebra[Modular][Rank](prm, testcoeffmat[1 .. convert(map(proc (t) options operator, arrow; ArrayTools[Size](t)[1] end proc, tempT[() .. -2]), `+`), gbs]) then
				Cred := modifiedCred:
				T1[ti] := LinearAlgebra[DeleteRow](T1[ti], found):
				crowstobedelet := [op(crowstobedelet), i]:
				rowColCnts := ArrayTools[Size](Cred):
			end if:
		end if:		
	end if:
end do:

    for k to ArrayTools[Size](T)[2] do
	    T1[k] := convert((map(proc (t) options operator, arrow; [op(convert(T1[k][t][..-2], list))] end proc, [seq(1 .. ArrayTools[Size](T1[k])[1])])), Matrix):
    end do:

    temp := convert(T1[-1], list, nested = true):
    bbs := map(i1 -> select(j1 ->  B[j1] = [temp[i1][1], op(temp[i1][2..])], [seq(1 .. numelems(B))])[1], [seq(1 .. numelems(temp))]): 
    gbs := convert(convert([seq(1 .. numelems(B))], set) minus convert(bbs, set), list):
    Cr := polytomat(convert(T1, list), B, eval(eqs), vars, numelems(B), convert(map(proc (t) options operator, arrow; ArrayTools[Size](t)[1] end proc, T1), `+`)):
    temp := Cr[1 .. convert(map(proc (t) options operator, arrow; ArrayTools[Size](t)[1] end proc, T1[() .. -2]), `+`), gbs]:
    T2 := T1:
    if ArrayTools[Size](Cred,1) = ArrayTools[Size](Cred,2) then     
        break: 
    end if:
end do:
T := T2:

#print(T, numelems(B), "........................................");
Tn := convert(map(proc (t) options operator, arrow; ArrayTools[Size](t,1) end proc, T), `+`):

# =============================================================================================================
Cr := polytomat(convert(T, list), B, eval(eqs), vars, numelems(B), convert(map(proc (t) options operator, arrow; ArrayTools[Size](t)[1] end proc, T), `+`)):

return selectedT, B, T:
end proc: