function[PEPsolutions] = solve(data) 
hiddenvarnumber = -1;
c1 = data(1);c2 = data(2);c3 = data(3);c4 = data(4);c5 = data(5);c6 = data(6);c7 = data(7);c8 = data(8);c9 = data(9);c10 = data(10);c11 = data(11);c12 = data(12);c13 = data(13);c14 = data(14);c15 = data(15);c16 = data(16);c17 = data(17);c18 = data(18);c19 = data(19);c20 = data(20);c21 = data(21);c22 = data(22);c23 = data(23);c24 = data(24);c25 = data(25);c26 = data(26);c27 = data(27);
t1 = -c4*c7*c9^2-c5*c8*c9^2+c6*c7^2*c9+c6*c8^2*c9;
t2 = -c4^2*c6*c9+c4*c6^2*c7-c5^2*c6*c9+c5*c6^2*c8;
t3 = c1*c7*c9^2+c2*c8*c9^2-c3*c7^2*c9-c3*c8^2*c9;
t4 = 2*c1*c4*c6*c9-c1*c6^2*c7+2*c2*c5*c6*c9-c2*c6^2*c8+c3*c4^2*c9-2*c3*c4*c6*c7+c3*c5^2*c9-2*c3*c5*c6*c8;
t5 = -3*c4*c7*c9^2-3*c5*c8*c9^2+3*c6*c7^2*c9+3*c6*c8^2*c9;
t6 = -3*c4^2*c6*c9+3*c4*c6^2*c7-3*c5^2*c6*c9+3*c5*c6^2*c8;
t7 = c1*c4*c9^2-2*c1*c6*c7*c9+c2*c5*c9^2-2*c2*c6*c8*c9+2*c3*c4*c7*c9+2*c3*c5*c8*c9-c3*c6*c7^2-c3*c6*c8^2;
t8 = -c1*c4*c6^2-c2*c5*c6^2+c3*c4^2*c6+c3*c5^2*c6;
t9 = -c1^2*c6*c9-2*c1*c3*c4*c9+2*c1*c3*c6*c7-c2^2*c6*c9-2*c2*c3*c5*c9+2*c2*c3*c6*c8+c3^2*c4*c7+c3^2*c5*c8;
t10 = 2*c1*c7*c9^2+2*c2*c8*c9^2-2*c3*c7^2*c9-2*c3*c8^2*c9;
t11 = 4*c1*c4*c6*c9-2*c1*c6^2*c7+4*c2*c5*c6*c9-2*c2*c6^2*c8+2*c3*c4^2*c9-4*c3*c4*c6*c7+2*c3*c5^2*c9-4*c3*c5*c6*c8;
t12 = -c1^2*c9^2-c2^2*c9^2+c3^2*c7^2+c3^2*c8^2+c4^2*c9^2+c5^2*c9^2-c6^2*c7^2-c6^2*c8^2;
t13 = c1^2*c6^2+c2^2*c6^2-c3^2*c4^2-c3^2*c5^2;
t14 = c1^2*c3*c9-c1*c3^2*c7+c2^2*c3*c9-c2*c3^2*c8;
t15 = 2*c1*c4*c9^2-4*c1*c6*c7*c9+2*c2*c5*c9^2-4*c2*c6*c8*c9+4*c3*c4*c7*c9+4*c3*c5*c8*c9-2*c3*c6*c7^2-2*c3*c6*c8^2;
t16 = -2*c1*c4*c6^2-2*c2*c5*c6^2+2*c3*c4^2*c6+2*c3*c5^2*c6;
t17 = -4*c1*c3*c4*c9+4*c1*c3*c6*c7-4*c2*c3*c5*c9+4*c2*c3*c6*c8-c4^2*c6*c9+c4*c6^2*c7-c5^2*c6*c9+c5*c6^2*c8;
t18 = -c1*c4*c9^2-2*c1*c6*c7*c9-c2*c5*c9^2-2*c2*c6*c8*c9+2*c3*c4*c7*c9+2*c3*c5*c8*c9+c3*c6*c7^2+c3*c6*c8^2;
t19 = -c1^2*c3*c6+c1*c3^2*c4-c2^2*c3*c6+c2*c3^2*c5;
t20 = c1^2*c3*c9-c1*c3^2*c7+2*c1*c4*c6*c9+c1*c6^2*c7+c2^2*c3*c9-c2*c3^2*c8+2*c2*c5*c6*c9+c2*c6^2*c8-c3*c4^2*c9-2*c3*c4*c6*c7-c3*c5^2*c9-2*c3*c5*c6*c8;
t21 = c1^2*c6*c9-2*c1*c3*c4*c9+2*c1*c3*c6*c7+c2^2*c6*c9-2*c2*c3*c5*c9+2*c2*c3*c6*c8-c3^2*c4*c7-c3^2*c5*c8-c4^2*c6*c9+c4*c6^2*c7-c5^2*c6*c9+c5*c6^2*c8;
t22 = -c1^2*c3*c6+c1*c3^2*c4-c1*c4*c6^2-c2^2*c3*c6+c2*c3^2*c5-c2*c5*c6^2+c3*c4^2*c6+c3*c5^2*c6;
t23 = -c13*c16*c18^2-c14*c17*c18^2+c15*c16^2*c18+c15*c17^2*c18;
t24 = -c13^2*c15*c18+c13*c15^2*c16-c14^2*c15*c18+c14*c15^2*c17;
t25 = c10*c16*c18^2+c11*c17*c18^2-c12*c16^2*c18-c12*c17^2*c18;
t26 = 2*c10*c13*c15*c18-c10*c15^2*c16+2*c11*c14*c15*c18-c11*c15^2*c17+c12*c13^2*c18-2*c12*c13*c15*c16+c12*c14^2*c18-2*c12*c14*c15*c17;
t27 = -3*c13*c16*c18^2-3*c14*c17*c18^2+3*c15*c16^2*c18+3*c15*c17^2*c18;
t28 = -3*c13^2*c15*c18+3*c13*c15^2*c16-3*c14^2*c15*c18+3*c14*c15^2*c17;
t29 = c10*c13*c18^2-2*c10*c15*c16*c18+c11*c14*c18^2-2*c11*c15*c17*c18+2*c12*c13*c16*c18+2*c12*c14*c17*c18-c12*c15*c16^2-c12*c15*c17^2;
t30 = -c10*c13*c15^2-c11*c14*c15^2+c12*c13^2*c15+c12*c14^2*c15;
t31 = -c10^2*c15*c18-2*c10*c12*c13*c18+2*c10*c12*c15*c16-c11^2*c15*c18-2*c11*c12*c14*c18+2*c11*c12*c15*c17+c12^2*c13*c16+c12^2*c14*c17;
t32 = 2*c10*c16*c18^2+2*c11*c17*c18^2-2*c12*c16^2*c18-2*c12*c17^2*c18;
t33 = 4*c10*c13*c15*c18-2*c10*c15^2*c16+4*c11*c14*c15*c18-2*c11*c15^2*c17+2*c12*c13^2*c18-4*c12*c13*c15*c16+2*c12*c14^2*c18-4*c12*c14*c15*c17;
t34 = -c10^2*c18^2-c11^2*c18^2+c12^2*c16^2+c12^2*c17^2+c13^2*c18^2+c14^2*c18^2-c15^2*c16^2-c15^2*c17^2;
t35 = c10^2*c15^2+c11^2*c15^2-c12^2*c13^2-c12^2*c14^2;
t36 = c10^2*c12*c18-c10*c12^2*c16+c11^2*c12*c18-c11*c12^2*c17;
t37 = 2*c10*c13*c18^2-4*c10*c15*c16*c18+2*c11*c14*c18^2-4*c11*c15*c17*c18+4*c12*c13*c16*c18+4*c12*c14*c17*c18-2*c12*c15*c16^2-2*c12*c15*c17^2;
t38 = -2*c10*c13*c15^2-2*c11*c14*c15^2+2*c12*c13^2*c15+2*c12*c14^2*c15;
t39 = -4*c10*c12*c13*c18+4*c10*c12*c15*c16-4*c11*c12*c14*c18+4*c11*c12*c15*c17-c13^2*c15*c18+c13*c15^2*c16-c14^2*c15*c18+c14*c15^2*c17;
t40 = -c10*c13*c18^2-2*c10*c15*c16*c18-c11*c14*c18^2-2*c11*c15*c17*c18+2*c12*c13*c16*c18+2*c12*c14*c17*c18+c12*c15*c16^2+c12*c15*c17^2;
t41 = -c10^2*c12*c15+c10*c12^2*c13-c11^2*c12*c15+c11*c12^2*c14;
t42 = c10^2*c12*c18-c10*c12^2*c16+2*c10*c13*c15*c18+c10*c15^2*c16+c11^2*c12*c18-c11*c12^2*c17+2*c11*c14*c15*c18+c11*c15^2*c17-c12*c13^2*c18-2*c12*c13*c15*c16-c12*c14^2*c18-2*c12*c14*c15*c17;
t43 = c10^2*c15*c18-2*c10*c12*c13*c18+2*c10*c12*c15*c16+c11^2*c15*c18-2*c11*c12*c14*c18+2*c11*c12*c15*c17-c12^2*c13*c16-c12^2*c14*c17-c13^2*c15*c18+c13*c15^2*c16-c14^2*c15*c18+c14*c15^2*c17;
t44 = -c10^2*c12*c15+c10*c12^2*c13-c10*c13*c15^2-c11^2*c12*c15+c11*c12^2*c14-c11*c14*c15^2+c12*c13^2*c15+c12*c14^2*c15;
t45 = -c22*c25*c27^2-c23*c26*c27^2+c24*c25^2*c27+c24*c26^2*c27;
t46 = -c22^2*c24*c27+c22*c24^2*c25-c23^2*c24*c27+c23*c24^2*c26;
t47 = c19*c25*c27^2+c20*c26*c27^2-c21*c25^2*c27-c21*c26^2*c27;
t48 = 2*c19*c22*c24*c27-c19*c24^2*c25+2*c20*c23*c24*c27-c20*c24^2*c26+c21*c22^2*c27-2*c21*c22*c24*c25+c21*c23^2*c27-2*c21*c23*c24*c26;
t49 = -3*c22*c25*c27^2-3*c23*c26*c27^2+3*c24*c25^2*c27+3*c24*c26^2*c27;
t50 = -3*c22^2*c24*c27+3*c22*c24^2*c25-3*c23^2*c24*c27+3*c23*c24^2*c26;
t51 = c19*c22*c27^2-2*c19*c24*c25*c27+c20*c23*c27^2-2*c20*c24*c26*c27+2*c21*c22*c25*c27+2*c21*c23*c26*c27-c21*c24*c25^2-c21*c24*c26^2;
t52 = -c19*c22*c24^2-c20*c23*c24^2+c21*c22^2*c24+c21*c23^2*c24;
t53 = -c19^2*c24*c27-2*c19*c21*c22*c27+2*c19*c21*c24*c25-c20^2*c24*c27-2*c20*c21*c23*c27+2*c20*c21*c24*c26+c21^2*c22*c25+c21^2*c23*c26;
t54 = 2*c19*c25*c27^2+2*c20*c26*c27^2-2*c21*c25^2*c27-2*c21*c26^2*c27;
t55 = 4*c19*c22*c24*c27-2*c19*c24^2*c25+4*c20*c23*c24*c27-2*c20*c24^2*c26+2*c21*c22^2*c27-4*c21*c22*c24*c25+2*c21*c23^2*c27-4*c21*c23*c24*c26;
t56 = -c19^2*c27^2-c20^2*c27^2+c21^2*c25^2+c21^2*c26^2+c22^2*c27^2+c23^2*c27^2-c24^2*c25^2-c24^2*c26^2;
t57 = c19^2*c24^2+c20^2*c24^2-c21^2*c22^2-c21^2*c23^2;
t58 = c19^2*c21*c27-c19*c21^2*c25+c20^2*c21*c27-c20*c21^2*c26;
t59 = 2*c19*c22*c27^2-4*c19*c24*c25*c27+2*c20*c23*c27^2-4*c20*c24*c26*c27+4*c21*c22*c25*c27+4*c21*c23*c26*c27-2*c21*c24*c25^2-2*c21*c24*c26^2;
t60 = -2*c19*c22*c24^2-2*c20*c23*c24^2+2*c21*c22^2*c24+2*c21*c23^2*c24;
t61 = -4*c19*c21*c22*c27+4*c19*c21*c24*c25-4*c20*c21*c23*c27+4*c20*c21*c24*c26-c22^2*c24*c27+c22*c24^2*c25-c23^2*c24*c27+c23*c24^2*c26;
t62 = -c19*c22*c27^2-2*c19*c24*c25*c27-c20*c23*c27^2-2*c20*c24*c26*c27+2*c21*c22*c25*c27+2*c21*c23*c26*c27+c21*c24*c25^2+c21*c24*c26^2;
t63 = -c19^2*c21*c24+c19*c21^2*c22-c20^2*c21*c24+c20*c21^2*c23;
t64 = c19^2*c21*c27-c19*c21^2*c25+2*c19*c22*c24*c27+c19*c24^2*c25+c20^2*c21*c27-c20*c21^2*c26+2*c20*c23*c24*c27+c20*c24^2*c26-c21*c22^2*c27-2*c21*c22*c24*c25-c21*c23^2*c27-2*c21*c23*c24*c26;
t65 = c19^2*c24*c27-2*c19*c21*c22*c27+2*c19*c21*c24*c25+c20^2*c24*c27-2*c20*c21*c23*c27+2*c20*c21*c24*c26-c21^2*c22*c25-c21^2*c23*c26-c22^2*c24*c27+c22*c24^2*c25-c23^2*c24*c27+c23*c24^2*c26;
t66 = -c19^2*c21*c24+c19*c21^2*c22-c19*c22*c24^2-c20^2*c21*c24+c20*c21^2*c23-c20*c23*c24^2+c21*c22^2*c24+c21*c23^2*c24;
M = zeros(6,41);
M(1,1) = t1;
M(1,2) = t3;
M(1,3) = t2;
M(1,4) = t5;
M(1,5) = t1;
M(1,6) = t4;
M(1,7) = t7;
M(1,8) = t10;
M(1,9) = t6;
M(1,10) = t5;
M(1,11) = t3;
M(1,12) = t9;
M(1,13) = t12;
M(1,14) = t1;
M(1,15) = t8;
M(1,16) = t11;
M(1,17) = t15;
M(1,18) = t3;
M(1,19) = t6;
M(1,20) = t1;
M(1,21) = t14;
M(1,22) = t18;
M(1,23) = t13;
M(1,24) = t17;
M(1,25) = t12;
M(1,26) = t16;
M(1,27) = t4;
M(1,28) = t7;
M(1,29) = t2;
M(1,30) = t19;
M(1,31) = t20;
M(1,32) = t13;
M(1,33) = t21;
M(1,34) = t8;
M(1,41) = t22;
M(2,1) = t23;
M(2,2) = t25;
M(2,3) = t24;
M(2,4) = t27;
M(2,5) = t23;
M(2,6) = t26;
M(2,7) = t29;
M(2,8) = t32;
M(2,9) = t28;
M(2,10) = t27;
M(2,11) = t25;
M(2,12) = t31;
M(2,13) = t34;
M(2,14) = t23;
M(2,15) = t30;
M(2,16) = t33;
M(2,17) = t37;
M(2,18) = t25;
M(2,19) = t28;
M(2,20) = t23;
M(2,21) = t36;
M(2,22) = t40;
M(2,23) = t35;
M(2,24) = t39;
M(2,25) = t34;
M(2,26) = t38;
M(2,27) = t26;
M(2,28) = t29;
M(2,29) = t24;
M(2,30) = t41;
M(2,31) = t42;
M(2,32) = t35;
M(2,33) = t43;
M(2,34) = t30;
M(2,41) = t44;
M(3,1) = t45;
M(3,2) = t47;
M(3,3) = t46;
M(3,4) = t49;
M(3,5) = t45;
M(3,6) = t48;
M(3,7) = t51;
M(3,8) = t54;
M(3,9) = t50;
M(3,10) = t49;
M(3,11) = t47;
M(3,12) = t53;
M(3,13) = t56;
M(3,14) = t45;
M(3,15) = t52;
M(3,16) = t55;
M(3,17) = t59;
M(3,18) = t47;
M(3,19) = t50;
M(3,20) = t45;
M(3,21) = t58;
M(3,22) = t62;
M(3,23) = t57;
M(3,24) = t61;
M(3,25) = t56;
M(3,26) = t60;
M(3,27) = t48;
M(3,28) = t51;
M(3,29) = t46;
M(3,30) = t63;
M(3,31) = t64;
M(3,32) = t57;
M(3,33) = t65;
M(3,34) = t52;
M(3,41) = t66;
M(4,35) = 1;
M(4,39) = -1;
M(5,36) = -1;
M(5,40) = 1;
M(6,37) = 1;
M(6,38) = -1;
M = [rref(M(1:3,:)); M(4:end,:)];
nc1 = M(31);nc2 = M(32);nc3 = M(33);nc4 = M(37);nc5 = M(38);nc6 = M(39);nc7 = M(67);nc8 = M(68);nc9 = M(69);nc10 = M(73);nc11 = M(74);nc12 = M(75);nc13 = M(85);nc14 = M(86);nc15 = M(87);nc16 = M(91);nc17 = M(92);nc18 = M(93);nc19 = M(97);nc20 = M(98);nc21 = M(99);nc22 = M(121);nc23 = M(122);nc24 = M(123);nc25 = M(127);nc26 = M(128);nc27 = M(129);nc28 = M(133);nc29 = M(134);nc30 = M(135);nc31 = M(139);nc32 = M(140);nc33 = M(141);nc34 = M(145);nc35 = M(146);nc36 = M(147);nc37 = M(151);nc38 = M(152);nc39 = M(153);nc40 = M(157);nc41 = M(158);nc42 = M(159);nc43 = M(163);nc44 = M(164);nc45 = M(165);nc46 = M(175);nc47 = M(176);nc48 = M(177);nc49 = M(181);nc50 = M(182);nc51 = M(183);nc52 = M(187);nc53 = M(188);nc54 = M(189);nc55 = M(193);nc56 = M(194);nc57 = M(195);nc58 = M(199);nc59 = M(200);nc60 = M(201);nc61 = M(241);nc62 = M(242);nc63 = M(243);
Cs = zeros(1,1);
Cs(1,1) = Cred;
solForm = [s(1,1) s(1,2) s(1,3) s(1,4) s(1,5);];

noOfVars = 5; 
C0 = allCss{1}; 
C1 = allCss{2};
X = B1 - B2 * (A2 \ A1); 
[V,D] = eig(X);
EValues = diag(D); 
EVectors = V;
good = ~(isinf(EValues) | isnan(EValues));
EValues = EValues(good);
EVectors = EVectors(:,good);

% The eigen values and eigen vectors have been now extracted
PEPsolutions=[];
nonInfEValuesInd = ~isinf(EValues);
NinfEValues = EValues(nonInfEValuesInd);
NinfEVectors = EVectors(:,nonInfEValuesInd);
noOfEvalues = length(NinfEValues);
sizeOfEvectors = length(solForm);

% We basically, then iterate through all of the received eigenvalues and
% then try to remove those that do not satisfy the criterion for the
% corresponding eigenvectors to have a form that is the same as that of the
% monomial vector.
% In fact we also remove those eigenvalues and eigenvectors which give us
% solutions that have infinity value for atleast one variable.
g = 1;
% monstocheck(rowstorem1)=[];
% monstocheck(rowstorem2)=[];
allvarsextracted = sum(abs(solForm));
if length(find(allvarsextracted==0)) == 0
    
    for i = 1:noOfEvalues
        otherVarValues = NinfEVectors(:,i);
        for k = 1:noOfVars
            sols(i,k) = 1;
            for j = 1:sizeOfEvectors
                sols(i,k) = sols(i,k) * otherVarValues(j) ^ solForm(j,k);
            end
        end
        %     sols(i,1) = NinfEValues(i);
        sols(i,k + 1) = NinfEValues(i);
        PEPsolutions(g,:) = sols(i,:);
        g = g+1;
        
    end

else
    PEPsolutions = [];
end
end
